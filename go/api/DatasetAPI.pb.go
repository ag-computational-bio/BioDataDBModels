// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: proto/DatasetAPI.proto

package api

import (
	context "context"
	commonmodels "github.com/ag-computational-bio/BioDataDBModels/go/commonmodels"
	datasetapimodels "github.com/ag-computational-bio/BioDataDBModels/go/datasetapimodels"
	datasetentrymodels "github.com/ag-computational-bio/BioDataDBModels/go/datasetentrymodels"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_proto_DatasetAPI_proto protoreflect.FileDescriptor

var file_proto_DatasetAPI_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41,
	0x50, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x50, 0x49, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x94,
	0x09, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x3c,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a,
	0x0c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x52, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x03, 0x2e, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7b,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x3a, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x03, 0x2e, 0x49,
	0x44, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x2a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x77, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x6a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x48, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x6c, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x83, 0x04, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x63, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x5a, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x50, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x2d, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x62, 0x69, 0x6f, 0x2f, 0x42,
	0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x42, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_DatasetAPI_proto_goTypes = []interface{}{
	(*datasetapimodels.CreateDatasetRequest)(nil),                         // 0: CreateDatasetRequest
	(*commonmodels.ID)(nil),                                               // 1: ID
	(*datasetapimodels.UpdateFieldsRequest)(nil),                          // 2: UpdateFieldsRequest
	(*datasetapimodels.UpdateCurrentDatasetVersionRequest)(nil),           // 3: UpdateCurrentDatasetVersionRequest
	(*datasetapimodels.CreateDatasetVersionRequest)(nil),                  // 4: CreateDatasetVersionRequest
	(*datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest)(nil), // 5: AddDatasetObjectGroupToDatasetVersionRequest
	(*datasetapimodels.CreateDatasetObjectGroupRequest)(nil),              // 6: CreateDatasetObjectGroupRequest
	(*datasetentrymodels.DatasetEntry)(nil),                               // 7: DatasetEntry
	(*datasetapimodels.DatasetList)(nil),                                  // 8: DatasetList
	(*datasetapimodels.DatasetVersionList)(nil),                           // 9: DatasetVersionList
	(*commonmodels.Empty)(nil),                                            // 10: Empty
	(*datasetentrymodels.DatasetVersionEntry)(nil),                        // 11: DatasetVersionEntry
	(*datasetapimodels.DatasetObjectGroupList)(nil),                       // 12: DatasetObjectGroupList
	(*datasetentrymodels.DatasetObjectGroup)(nil),                         // 13: DatasetObjectGroup
}
var file_proto_DatasetAPI_proto_depIdxs = []int32{
	0,  // 0: DatasetService.CreateNewDataset:input_type -> CreateDatasetRequest
	1,  // 1: DatasetService.Datasets:input_type -> ID
	1,  // 2: DatasetService.DatasetVersions:input_type -> ID
	2,  // 3: DatasetService.UpdateDatasetField:input_type -> UpdateFieldsRequest
	3,  // 4: DatasetService.UpdateCurrentDatasetVersion:input_type -> UpdateCurrentDatasetVersionRequest
	1,  // 5: DatasetService.DeleteDataset:input_type -> ID
	4,  // 6: DatasetService.CreateNewDatasetVersion:input_type -> CreateDatasetVersionRequest
	1,  // 7: DatasetService.GetDatasetVersion:input_type -> ID
	2,  // 8: DatasetService.UpdateDatasetVersionField:input_type -> UpdateFieldsRequest
	5,  // 9: DatasetService.AddObjectGroupToDatasetVersion:input_type -> AddDatasetObjectGroupToDatasetVersionRequest
	1,  // 10: DatasetService.DeleteDatasetVersion:input_type -> ID
	1,  // 11: DatasetService.DatasetVersionObjectGroups:input_type -> ID
	6,  // 12: ObjectsService.CreateDatsetObjectGroup:input_type -> CreateDatasetObjectGroupRequest
	1,  // 13: ObjectsService.DatasetObjectsGroups:input_type -> ID
	1,  // 14: ObjectsService.DatasetVersionObjectGroups:input_type -> ID
	1,  // 15: ObjectsService.GetDatasetObjectGroup:input_type -> ID
	1,  // 16: ObjectsService.DeleteDatasetObjectGroup:input_type -> ID
	7,  // 17: DatasetService.CreateNewDataset:output_type -> DatasetEntry
	8,  // 18: DatasetService.Datasets:output_type -> DatasetList
	9,  // 19: DatasetService.DatasetVersions:output_type -> DatasetVersionList
	7,  // 20: DatasetService.UpdateDatasetField:output_type -> DatasetEntry
	7,  // 21: DatasetService.UpdateCurrentDatasetVersion:output_type -> DatasetEntry
	10, // 22: DatasetService.DeleteDataset:output_type -> Empty
	11, // 23: DatasetService.CreateNewDatasetVersion:output_type -> DatasetVersionEntry
	11, // 24: DatasetService.GetDatasetVersion:output_type -> DatasetVersionEntry
	7,  // 25: DatasetService.UpdateDatasetVersionField:output_type -> DatasetEntry
	10, // 26: DatasetService.AddObjectGroupToDatasetVersion:output_type -> Empty
	10, // 27: DatasetService.DeleteDatasetVersion:output_type -> Empty
	12, // 28: DatasetService.DatasetVersionObjectGroups:output_type -> DatasetObjectGroupList
	13, // 29: ObjectsService.CreateDatsetObjectGroup:output_type -> DatasetObjectGroup
	12, // 30: ObjectsService.DatasetObjectsGroups:output_type -> DatasetObjectGroupList
	12, // 31: ObjectsService.DatasetVersionObjectGroups:output_type -> DatasetObjectGroupList
	13, // 32: ObjectsService.GetDatasetObjectGroup:output_type -> DatasetObjectGroup
	10, // 33: ObjectsService.DeleteDatasetObjectGroup:output_type -> Empty
	17, // [17:34] is the sub-list for method output_type
	0,  // [0:17] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_DatasetAPI_proto_init() }
func file_proto_DatasetAPI_proto_init() {
	if File_proto_DatasetAPI_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_DatasetAPI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_DatasetAPI_proto_goTypes,
		DependencyIndexes: file_proto_DatasetAPI_proto_depIdxs,
	}.Build()
	File_proto_DatasetAPI_proto = out.File
	file_proto_DatasetAPI_proto_rawDesc = nil
	file_proto_DatasetAPI_proto_goTypes = nil
	file_proto_DatasetAPI_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetServiceClient interface {
	// CreateNewDataset Creates a new dataset and associates it with a dataset
	CreateNewDataset(ctx context.Context, in *datasetapimodels.CreateDatasetRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error)
	// Datasets Lists all datasets of a user
	Datasets(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetList, error)
	// Lists Versions of a dataset
	DatasetVersions(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetVersionList, error)
	// Updates a field of a dataset
	UpdateDatasetField(ctx context.Context, in *datasetapimodels.UpdateFieldsRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error)
	// Updates the current dataset version of a dataset
	UpdateCurrentDatasetVersion(ctx context.Context, in *datasetapimodels.UpdateCurrentDatasetVersionRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error)
	// DeleteDataset Delete a dataset
	// Datasets can only be deleted if
	DeleteDataset(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	// Creates a new dataset version which is linked to an exisiting dataset
	CreateNewDatasetVersion(ctx context.Context, in *datasetapimodels.CreateDatasetVersionRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetVersionEntry, error)
	GetDatasetVersion(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetentrymodels.DatasetVersionEntry, error)
	UpdateDatasetVersionField(ctx context.Context, in *datasetapimodels.UpdateFieldsRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error)
	AddObjectGroupToDatasetVersion(ctx context.Context, in *datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	// Deletes a dataset version
	// This should not delete the underlaying dataset objects
	DeleteDatasetVersion(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	//DatasetVersionObjectGroups Lists all objects groups that are part of the given dataset version
	DatasetVersionObjectGroups(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetObjectGroupList, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) CreateNewDataset(ctx context.Context, in *datasetapimodels.CreateDatasetRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error) {
	out := new(datasetentrymodels.DatasetEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/CreateNewDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Datasets(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetList, error) {
	out := new(datasetapimodels.DatasetList)
	err := c.cc.Invoke(ctx, "/DatasetService/Datasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DatasetVersions(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetVersionList, error) {
	out := new(datasetapimodels.DatasetVersionList)
	err := c.cc.Invoke(ctx, "/DatasetService/DatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetField(ctx context.Context, in *datasetapimodels.UpdateFieldsRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error) {
	out := new(datasetentrymodels.DatasetEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/UpdateDatasetField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateCurrentDatasetVersion(ctx context.Context, in *datasetapimodels.UpdateCurrentDatasetVersionRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error) {
	out := new(datasetentrymodels.DatasetEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/UpdateCurrentDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/DatasetService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateNewDatasetVersion(ctx context.Context, in *datasetapimodels.CreateDatasetVersionRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetVersionEntry, error) {
	out := new(datasetentrymodels.DatasetVersionEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/CreateNewDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetVersion(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetentrymodels.DatasetVersionEntry, error) {
	out := new(datasetentrymodels.DatasetVersionEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/GetDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetVersionField(ctx context.Context, in *datasetapimodels.UpdateFieldsRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetEntry, error) {
	out := new(datasetentrymodels.DatasetEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/UpdateDatasetVersionField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) AddObjectGroupToDatasetVersion(ctx context.Context, in *datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/DatasetService/AddObjectGroupToDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasetVersion(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/DatasetService/DeleteDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DatasetVersionObjectGroups(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetObjectGroupList, error) {
	out := new(datasetapimodels.DatasetObjectGroupList)
	err := c.cc.Invoke(ctx, "/DatasetService/DatasetVersionObjectGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
type DatasetServiceServer interface {
	// CreateNewDataset Creates a new dataset and associates it with a dataset
	CreateNewDataset(context.Context, *datasetapimodels.CreateDatasetRequest) (*datasetentrymodels.DatasetEntry, error)
	// Datasets Lists all datasets of a user
	Datasets(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetList, error)
	// Lists Versions of a dataset
	DatasetVersions(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetVersionList, error)
	// Updates a field of a dataset
	UpdateDatasetField(context.Context, *datasetapimodels.UpdateFieldsRequest) (*datasetentrymodels.DatasetEntry, error)
	// Updates the current dataset version of a dataset
	UpdateCurrentDatasetVersion(context.Context, *datasetapimodels.UpdateCurrentDatasetVersionRequest) (*datasetentrymodels.DatasetEntry, error)
	// DeleteDataset Delete a dataset
	// Datasets can only be deleted if
	DeleteDataset(context.Context, *commonmodels.ID) (*commonmodels.Empty, error)
	// Creates a new dataset version which is linked to an exisiting dataset
	CreateNewDatasetVersion(context.Context, *datasetapimodels.CreateDatasetVersionRequest) (*datasetentrymodels.DatasetVersionEntry, error)
	GetDatasetVersion(context.Context, *commonmodels.ID) (*datasetentrymodels.DatasetVersionEntry, error)
	UpdateDatasetVersionField(context.Context, *datasetapimodels.UpdateFieldsRequest) (*datasetentrymodels.DatasetEntry, error)
	AddObjectGroupToDatasetVersion(context.Context, *datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest) (*commonmodels.Empty, error)
	// Deletes a dataset version
	// This should not delete the underlaying dataset objects
	DeleteDatasetVersion(context.Context, *commonmodels.ID) (*commonmodels.Empty, error)
	//DatasetVersionObjectGroups Lists all objects groups that are part of the given dataset version
	DatasetVersionObjectGroups(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetObjectGroupList, error)
}

// UnimplementedDatasetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (*UnimplementedDatasetServiceServer) CreateNewDataset(context.Context, *datasetapimodels.CreateDatasetRequest) (*datasetentrymodels.DatasetEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) Datasets(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Datasets not implemented")
}
func (*UnimplementedDatasetServiceServer) DatasetVersions(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetVersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetVersions not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDatasetField(context.Context, *datasetapimodels.UpdateFieldsRequest) (*datasetentrymodels.DatasetEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetField not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateCurrentDatasetVersion(context.Context, *datasetapimodels.UpdateCurrentDatasetVersionRequest) (*datasetentrymodels.DatasetEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *commonmodels.ID) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) CreateNewDatasetVersion(context.Context, *datasetapimodels.CreateDatasetVersionRequest) (*datasetentrymodels.DatasetVersionEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) GetDatasetVersion(context.Context, *commonmodels.ID) (*datasetentrymodels.DatasetVersionEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDatasetVersionField(context.Context, *datasetapimodels.UpdateFieldsRequest) (*datasetentrymodels.DatasetEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetVersionField not implemented")
}
func (*UnimplementedDatasetServiceServer) AddObjectGroupToDatasetVersion(context.Context, *datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectGroupToDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDatasetVersion(context.Context, *commonmodels.ID) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) DatasetVersionObjectGroups(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetObjectGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetVersionObjectGroups not implemented")
}

func RegisterDatasetServiceServer(s *grpc.Server, srv DatasetServiceServer) {
	s.RegisterService(&_DatasetService_serviceDesc, srv)
}

func _DatasetService_CreateNewDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateNewDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/CreateNewDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateNewDataset(ctx, req.(*datasetapimodels.CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_Datasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).Datasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/Datasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).Datasets(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DatasetVersions(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.UpdateFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/UpdateDatasetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetField(ctx, req.(*datasetapimodels.UpdateFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateCurrentDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.UpdateCurrentDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateCurrentDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/UpdateCurrentDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateCurrentDatasetVersion(ctx, req.(*datasetapimodels.UpdateCurrentDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateNewDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.CreateDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateNewDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/CreateNewDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateNewDatasetVersion(ctx, req.(*datasetapimodels.CreateDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/GetDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetVersion(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetVersionField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.UpdateFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetVersionField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/UpdateDatasetVersionField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetVersionField(ctx, req.(*datasetapimodels.UpdateFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_AddObjectGroupToDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).AddObjectGroupToDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/AddObjectGroupToDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).AddObjectGroupToDatasetVersion(ctx, req.(*datasetapimodels.AddDatasetObjectGroupToDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DeleteDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasetVersion(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DatasetVersionObjectGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DatasetVersionObjectGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DatasetVersionObjectGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DatasetVersionObjectGroups(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewDataset",
			Handler:    _DatasetService_CreateNewDataset_Handler,
		},
		{
			MethodName: "Datasets",
			Handler:    _DatasetService_Datasets_Handler,
		},
		{
			MethodName: "DatasetVersions",
			Handler:    _DatasetService_DatasetVersions_Handler,
		},
		{
			MethodName: "UpdateDatasetField",
			Handler:    _DatasetService_UpdateDatasetField_Handler,
		},
		{
			MethodName: "UpdateCurrentDatasetVersion",
			Handler:    _DatasetService_UpdateCurrentDatasetVersion_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "CreateNewDatasetVersion",
			Handler:    _DatasetService_CreateNewDatasetVersion_Handler,
		},
		{
			MethodName: "GetDatasetVersion",
			Handler:    _DatasetService_GetDatasetVersion_Handler,
		},
		{
			MethodName: "UpdateDatasetVersionField",
			Handler:    _DatasetService_UpdateDatasetVersionField_Handler,
		},
		{
			MethodName: "AddObjectGroupToDatasetVersion",
			Handler:    _DatasetService_AddObjectGroupToDatasetVersion_Handler,
		},
		{
			MethodName: "DeleteDatasetVersion",
			Handler:    _DatasetService_DeleteDatasetVersion_Handler,
		},
		{
			MethodName: "DatasetVersionObjectGroups",
			Handler:    _DatasetService_DatasetVersionObjectGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/DatasetAPI.proto",
}

// ObjectsServiceClient is the client API for ObjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjectsServiceClient interface {
	//CreateDatsetObjectGroup Creates a new dataset object group in the database
	//Will also create all related dataset objects
	CreateDatsetObjectGroup(ctx context.Context, in *datasetapimodels.CreateDatasetObjectGroupRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetObjectGroup, error)
	DatasetObjectsGroups(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetObjectGroupList, error)
	//DatasetVersionObjectGroups Lists all objects groups that are part of the given dataset version
	DatasetVersionObjectGroups(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetObjectGroupList, error)
	//GetDatasetObjectGroup The dataset object group with the given ID
	//Will only return a dataset object group without its affiliated objects
	GetDatasetObjectGroup(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetentrymodels.DatasetObjectGroup, error)
	//DeleteDatasetObjectGroup Deletes the given dataset group and all associated dataset objects
	//Can only be used when all linked dataset versions have been deleted
	DeleteDatasetObjectGroup(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error)
}

type objectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectsServiceClient(cc grpc.ClientConnInterface) ObjectsServiceClient {
	return &objectsServiceClient{cc}
}

func (c *objectsServiceClient) CreateDatsetObjectGroup(ctx context.Context, in *datasetapimodels.CreateDatasetObjectGroupRequest, opts ...grpc.CallOption) (*datasetentrymodels.DatasetObjectGroup, error) {
	out := new(datasetentrymodels.DatasetObjectGroup)
	err := c.cc.Invoke(ctx, "/ObjectsService/CreateDatsetObjectGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) DatasetObjectsGroups(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetObjectGroupList, error) {
	out := new(datasetapimodels.DatasetObjectGroupList)
	err := c.cc.Invoke(ctx, "/ObjectsService/DatasetObjectsGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) DatasetVersionObjectGroups(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetapimodels.DatasetObjectGroupList, error) {
	out := new(datasetapimodels.DatasetObjectGroupList)
	err := c.cc.Invoke(ctx, "/ObjectsService/DatasetVersionObjectGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) GetDatasetObjectGroup(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetentrymodels.DatasetObjectGroup, error) {
	out := new(datasetentrymodels.DatasetObjectGroup)
	err := c.cc.Invoke(ctx, "/ObjectsService/GetDatasetObjectGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) DeleteDatasetObjectGroup(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/ObjectsService/DeleteDatasetObjectGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectsServiceServer is the server API for ObjectsService service.
type ObjectsServiceServer interface {
	//CreateDatsetObjectGroup Creates a new dataset object group in the database
	//Will also create all related dataset objects
	CreateDatsetObjectGroup(context.Context, *datasetapimodels.CreateDatasetObjectGroupRequest) (*datasetentrymodels.DatasetObjectGroup, error)
	DatasetObjectsGroups(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetObjectGroupList, error)
	//DatasetVersionObjectGroups Lists all objects groups that are part of the given dataset version
	DatasetVersionObjectGroups(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetObjectGroupList, error)
	//GetDatasetObjectGroup The dataset object group with the given ID
	//Will only return a dataset object group without its affiliated objects
	GetDatasetObjectGroup(context.Context, *commonmodels.ID) (*datasetentrymodels.DatasetObjectGroup, error)
	//DeleteDatasetObjectGroup Deletes the given dataset group and all associated dataset objects
	//Can only be used when all linked dataset versions have been deleted
	DeleteDatasetObjectGroup(context.Context, *commonmodels.ID) (*commonmodels.Empty, error)
}

// UnimplementedObjectsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedObjectsServiceServer struct {
}

func (*UnimplementedObjectsServiceServer) CreateDatsetObjectGroup(context.Context, *datasetapimodels.CreateDatasetObjectGroupRequest) (*datasetentrymodels.DatasetObjectGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatsetObjectGroup not implemented")
}
func (*UnimplementedObjectsServiceServer) DatasetObjectsGroups(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetObjectGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetObjectsGroups not implemented")
}
func (*UnimplementedObjectsServiceServer) DatasetVersionObjectGroups(context.Context, *commonmodels.ID) (*datasetapimodels.DatasetObjectGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetVersionObjectGroups not implemented")
}
func (*UnimplementedObjectsServiceServer) GetDatasetObjectGroup(context.Context, *commonmodels.ID) (*datasetentrymodels.DatasetObjectGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetObjectGroup not implemented")
}
func (*UnimplementedObjectsServiceServer) DeleteDatasetObjectGroup(context.Context, *commonmodels.ID) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetObjectGroup not implemented")
}

func RegisterObjectsServiceServer(s *grpc.Server, srv ObjectsServiceServer) {
	s.RegisterService(&_ObjectsService_serviceDesc, srv)
}

func _ObjectsService_CreateDatsetObjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetapimodels.CreateDatasetObjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).CreateDatsetObjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/CreateDatsetObjectGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).CreateDatsetObjectGroup(ctx, req.(*datasetapimodels.CreateDatasetObjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_DatasetObjectsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).DatasetObjectsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/DatasetObjectsGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).DatasetObjectsGroups(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_DatasetVersionObjectGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).DatasetVersionObjectGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/DatasetVersionObjectGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).DatasetVersionObjectGroups(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_GetDatasetObjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).GetDatasetObjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/GetDatasetObjectGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).GetDatasetObjectGroup(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_DeleteDatasetObjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).DeleteDatasetObjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/DeleteDatasetObjectGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).DeleteDatasetObjectGroup(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ObjectsService",
	HandlerType: (*ObjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatsetObjectGroup",
			Handler:    _ObjectsService_CreateDatsetObjectGroup_Handler,
		},
		{
			MethodName: "DatasetObjectsGroups",
			Handler:    _ObjectsService_DatasetObjectsGroups_Handler,
		},
		{
			MethodName: "DatasetVersionObjectGroups",
			Handler:    _ObjectsService_DatasetVersionObjectGroups_Handler,
		},
		{
			MethodName: "GetDatasetObjectGroup",
			Handler:    _ObjectsService_GetDatasetObjectGroup_Handler,
		},
		{
			MethodName: "DeleteDatasetObjectGroup",
			Handler:    _ObjectsService_DeleteDatasetObjectGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/DatasetAPI.proto",
}
