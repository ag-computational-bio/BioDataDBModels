// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.0
// source: proto/APIs.proto

package api

import (
	context "context"
	commonmodels "github.com/ag-computational-bio/BioDataDBModels/go/commonmodels"
	datasetmodels "github.com/ag-computational-bio/BioDataDBModels/go/datasetmodels"
	loadmodels "github.com/ag-computational-bio/BioDataDBModels/go/loadmodels"
	metadatamodels "github.com/ag-computational-bio/BioDataDBModels/go/metadatamodels"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_proto_APIs_proto protoreflect.FileDescriptor

var file_proto_APIs_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x70, 0x0a, 0x0b, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x32, 0xa8, 0x07, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x41, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x3f,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x03, 0x2e, 0x49, 0x44, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x74, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x4e, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x13, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x03, 0x2e,
	0x49, 0x44, 0x1a, 0x12, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5f,
	0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x03, 0x2e, 0x49,
	0x44, 0x1a, 0x13, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x55, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x03, 0x2e, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6c,
	0x69, 0x6e, 0x6b, 0x3a, 0x01, 0x2a, 0x32, 0x9c, 0x05, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x42, 0x12, 0x16, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x3a, 0x01,
	0x2a, 0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x42, 0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x42, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x62, 0x73, 0x12,
	0x78, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x42, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x42, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x42, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x63, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a,
	0x01, 0x2a, 0x12, 0x41, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x3a, 0x01, 0x2a, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x62, 0x69, 0x6f, 0x2f, 0x42, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x42, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_APIs_proto_goTypes = []interface{}{
	(*loadmodels.CreateLoadLinkSetRequest)(nil),                  // 0: CreateLoadLinkSetRequest
	(*datasetmodels.CreateDatasetRequest)(nil),                   // 1: CreateDatasetRequest
	(*commonmodels.Empty)(nil),                                   // 2: Empty
	(*commonmodels.ID)(nil),                                      // 3: ID
	(*datasetmodels.NewDatasetVersionRequest)(nil),               // 4: NewDatasetVersionRequest
	(*datasetmodels.UpdateDatasetVersionObjectCountRequest)(nil), // 5: UpdateDatasetVersionObjectCountRequest
	(*metadatamodels.InitMetadataDBRequest)(nil),                 // 6: InitMetadataDBRequest
	(*metadatamodels.InitMetadataCollectionRequest)(nil),         // 7: InitMetadataCollectionRequest
	(*metadatamodels.InsertMetadataRequest)(nil),                 // 8: InsertMetadataRequest
	(*metadatamodels.AddMetadataIndexRequest)(nil),               // 9: AddMetadataIndexRequest
	(*metadatamodels.QueryRequest)(nil),                          // 10: QueryRequest
	(*loadmodels.UploadLinks)(nil),                               // 11: UploadLinks
	(*datasetmodels.DatasetEntry)(nil),                           // 12: DatasetEntry
	(*datasetmodels.DatasetList)(nil),                            // 13: DatasetList
	(*datasetmodels.DatasetVersionEntry)(nil),                    // 14: DatasetVersionEntry
	(*datasetmodels.DatasetVersionList)(nil),                     // 15: DatasetVersionList
	(*datasetmodels.DatasetObjectList)(nil),                      // 16: DatasetObjectList
	(*datasetmodels.DatasetObjectLinks)(nil),                     // 17: DatasetObjectLinks
	(*datasetmodels.DatasetObjectEntry)(nil),                     // 18: DatasetObjectEntry
	(*metadatamodels.MetadataDBEntry)(nil),                       // 19: MetadataDBEntry
	(*metadatamodels.MetadataDBList)(nil),                        // 20: MetadataDBList
	(*metadatamodels.MetadataDBCollectionList)(nil),              // 21: MetadataDBCollectionList
	(*metadatamodels.Field)(nil),                                 // 22: Field
}
var file_proto_APIs_proto_depIdxs = []int32{
	0,  // 0: LoadService.CreateLoadLinkSet:input_type -> CreateLoadLinkSetRequest
	1,  // 1: DatasetService.CreateNewDataset:input_type -> CreateDatasetRequest
	2,  // 2: DatasetService.Datasets:input_type -> Empty
	3,  // 3: DatasetService.DeleteDataset:input_type -> ID
	4,  // 4: DatasetService.CreateNewDatasetVersion:input_type -> NewDatasetVersionRequest
	3,  // 5: DatasetService.DatasetVersions:input_type -> ID
	3,  // 6: DatasetService.DeleteDatasetVersion:input_type -> ID
	5,  // 7: DatasetService.UpdateDatasetVersionObjectCount:input_type -> UpdateDatasetVersionObjectCountRequest
	3,  // 8: DatasetService.DatasetVersionObjects:input_type -> ID
	3,  // 9: DatasetService.DatasetVersionObjectsLinks:input_type -> ID
	3,  // 10: DatasetService.DatasetObjectLink:input_type -> ID
	6,  // 11: MetadataCompositeStore.InitMetadataDB:input_type -> InitMetadataDBRequest
	2,  // 12: MetadataCompositeStore.ListMetadataDBs:input_type -> Empty
	7,  // 13: MetadataCompositeStore.InitMetadataDBCollection:input_type -> InitMetadataCollectionRequest
	2,  // 14: MetadataCompositeStore.ListMetadataDBCollections:input_type -> Empty
	8,  // 15: MetadataCompositeStore.InsertMetadata:input_type -> InsertMetadataRequest
	9,  // 16: MetadataCompositeStore.AddMetadataIndex:input_type -> AddMetadataIndexRequest
	10, // 17: MetadataCompositeStore.Query:input_type -> QueryRequest
	11, // 18: LoadService.CreateLoadLinkSet:output_type -> UploadLinks
	12, // 19: DatasetService.CreateNewDataset:output_type -> DatasetEntry
	13, // 20: DatasetService.Datasets:output_type -> DatasetList
	2,  // 21: DatasetService.DeleteDataset:output_type -> Empty
	14, // 22: DatasetService.CreateNewDatasetVersion:output_type -> DatasetVersionEntry
	15, // 23: DatasetService.DatasetVersions:output_type -> DatasetVersionList
	2,  // 24: DatasetService.DeleteDatasetVersion:output_type -> Empty
	2,  // 25: DatasetService.UpdateDatasetVersionObjectCount:output_type -> Empty
	16, // 26: DatasetService.DatasetVersionObjects:output_type -> DatasetObjectList
	17, // 27: DatasetService.DatasetVersionObjectsLinks:output_type -> DatasetObjectLinks
	18, // 28: DatasetService.DatasetObjectLink:output_type -> DatasetObjectEntry
	19, // 29: MetadataCompositeStore.InitMetadataDB:output_type -> MetadataDBEntry
	20, // 30: MetadataCompositeStore.ListMetadataDBs:output_type -> MetadataDBList
	19, // 31: MetadataCompositeStore.InitMetadataDBCollection:output_type -> MetadataDBEntry
	21, // 32: MetadataCompositeStore.ListMetadataDBCollections:output_type -> MetadataDBCollectionList
	2,  // 33: MetadataCompositeStore.InsertMetadata:output_type -> Empty
	2,  // 34: MetadataCompositeStore.AddMetadataIndex:output_type -> Empty
	22, // 35: MetadataCompositeStore.Query:output_type -> Field
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_APIs_proto_init() }
func file_proto_APIs_proto_init() {
	if File_proto_APIs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_APIs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_APIs_proto_goTypes,
		DependencyIndexes: file_proto_APIs_proto_depIdxs,
	}.Build()
	File_proto_APIs_proto = out.File
	file_proto_APIs_proto_rawDesc = nil
	file_proto_APIs_proto_goTypes = nil
	file_proto_APIs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoadServiceClient is the client API for LoadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadServiceClient interface {
	// Creates a list of upload links to place dataset entities in object storage
	// and adds corresponding metadata objects
	CreateLoadLinkSet(ctx context.Context, in *loadmodels.CreateLoadLinkSetRequest, opts ...grpc.CallOption) (*loadmodels.UploadLinks, error)
}

type loadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadServiceClient(cc grpc.ClientConnInterface) LoadServiceClient {
	return &loadServiceClient{cc}
}

func (c *loadServiceClient) CreateLoadLinkSet(ctx context.Context, in *loadmodels.CreateLoadLinkSetRequest, opts ...grpc.CallOption) (*loadmodels.UploadLinks, error) {
	out := new(loadmodels.UploadLinks)
	err := c.cc.Invoke(ctx, "/LoadService/CreateLoadLinkSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadServiceServer is the server API for LoadService service.
type LoadServiceServer interface {
	// Creates a list of upload links to place dataset entities in object storage
	// and adds corresponding metadata objects
	CreateLoadLinkSet(context.Context, *loadmodels.CreateLoadLinkSetRequest) (*loadmodels.UploadLinks, error)
}

// UnimplementedLoadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoadServiceServer struct {
}

func (*UnimplementedLoadServiceServer) CreateLoadLinkSet(context.Context, *loadmodels.CreateLoadLinkSetRequest) (*loadmodels.UploadLinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadLinkSet not implemented")
}

func RegisterLoadServiceServer(s *grpc.Server, srv LoadServiceServer) {
	s.RegisterService(&_LoadService_serviceDesc, srv)
}

func _LoadService_CreateLoadLinkSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loadmodels.CreateLoadLinkSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadServiceServer).CreateLoadLinkSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LoadService/CreateLoadLinkSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadServiceServer).CreateLoadLinkSet(ctx, req.(*loadmodels.CreateLoadLinkSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LoadService",
	HandlerType: (*LoadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoadLinkSet",
			Handler:    _LoadService_CreateLoadLinkSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/APIs.proto",
}

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetServiceClient interface {
	// CreateNewDataset Creates a new dataset
	CreateNewDataset(ctx context.Context, in *datasetmodels.CreateDatasetRequest, opts ...grpc.CallOption) (*datasetmodels.DatasetEntry, error)
	// Datasets Lists all datasets
	Datasets(ctx context.Context, in *commonmodels.Empty, opts ...grpc.CallOption) (*datasetmodels.DatasetList, error)
	// DeleteDataset Delete a dataset
	DeleteDataset(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	// Creates a new dataset version based on an existing dataset
	CreateNewDatasetVersion(ctx context.Context, in *datasetmodels.NewDatasetVersionRequest, opts ...grpc.CallOption) (*datasetmodels.DatasetVersionEntry, error)
	// Lists Versions of a dataset
	DatasetVersions(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetVersionList, error)
	DeleteDatasetVersion(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	UpdateDatasetVersionObjectCount(ctx context.Context, in *datasetmodels.UpdateDatasetVersionObjectCountRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	// Lists all entities of a dataset
	DatasetVersionObjects(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetObjectList, error)
	// Creates preauth download links for all entities of a dataset
	DatasetVersionObjectsLinks(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetObjectLinks, error)
	// DatasetObjectLink A download link for
	DatasetObjectLink(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetObjectEntry, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) CreateNewDataset(ctx context.Context, in *datasetmodels.CreateDatasetRequest, opts ...grpc.CallOption) (*datasetmodels.DatasetEntry, error) {
	out := new(datasetmodels.DatasetEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/CreateNewDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Datasets(ctx context.Context, in *commonmodels.Empty, opts ...grpc.CallOption) (*datasetmodels.DatasetList, error) {
	out := new(datasetmodels.DatasetList)
	err := c.cc.Invoke(ctx, "/DatasetService/Datasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/DatasetService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateNewDatasetVersion(ctx context.Context, in *datasetmodels.NewDatasetVersionRequest, opts ...grpc.CallOption) (*datasetmodels.DatasetVersionEntry, error) {
	out := new(datasetmodels.DatasetVersionEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/CreateNewDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DatasetVersions(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetVersionList, error) {
	out := new(datasetmodels.DatasetVersionList)
	err := c.cc.Invoke(ctx, "/DatasetService/DatasetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDatasetVersion(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/DatasetService/DeleteDatasetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetVersionObjectCount(ctx context.Context, in *datasetmodels.UpdateDatasetVersionObjectCountRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/DatasetService/UpdateDatasetVersionObjectCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DatasetVersionObjects(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetObjectList, error) {
	out := new(datasetmodels.DatasetObjectList)
	err := c.cc.Invoke(ctx, "/DatasetService/DatasetVersionObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DatasetVersionObjectsLinks(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetObjectLinks, error) {
	out := new(datasetmodels.DatasetObjectLinks)
	err := c.cc.Invoke(ctx, "/DatasetService/DatasetVersionObjectsLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DatasetObjectLink(ctx context.Context, in *commonmodels.ID, opts ...grpc.CallOption) (*datasetmodels.DatasetObjectEntry, error) {
	out := new(datasetmodels.DatasetObjectEntry)
	err := c.cc.Invoke(ctx, "/DatasetService/DatasetObjectLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
type DatasetServiceServer interface {
	// CreateNewDataset Creates a new dataset
	CreateNewDataset(context.Context, *datasetmodels.CreateDatasetRequest) (*datasetmodels.DatasetEntry, error)
	// Datasets Lists all datasets
	Datasets(context.Context, *commonmodels.Empty) (*datasetmodels.DatasetList, error)
	// DeleteDataset Delete a dataset
	DeleteDataset(context.Context, *commonmodels.ID) (*commonmodels.Empty, error)
	// Creates a new dataset version based on an existing dataset
	CreateNewDatasetVersion(context.Context, *datasetmodels.NewDatasetVersionRequest) (*datasetmodels.DatasetVersionEntry, error)
	// Lists Versions of a dataset
	DatasetVersions(context.Context, *commonmodels.ID) (*datasetmodels.DatasetVersionList, error)
	DeleteDatasetVersion(context.Context, *commonmodels.ID) (*commonmodels.Empty, error)
	UpdateDatasetVersionObjectCount(context.Context, *datasetmodels.UpdateDatasetVersionObjectCountRequest) (*commonmodels.Empty, error)
	// Lists all entities of a dataset
	DatasetVersionObjects(context.Context, *commonmodels.ID) (*datasetmodels.DatasetObjectList, error)
	// Creates preauth download links for all entities of a dataset
	DatasetVersionObjectsLinks(context.Context, *commonmodels.ID) (*datasetmodels.DatasetObjectLinks, error)
	// DatasetObjectLink A download link for
	DatasetObjectLink(context.Context, *commonmodels.ID) (*datasetmodels.DatasetObjectEntry, error)
}

// UnimplementedDatasetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (*UnimplementedDatasetServiceServer) CreateNewDataset(context.Context, *datasetmodels.CreateDatasetRequest) (*datasetmodels.DatasetEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) Datasets(context.Context, *commonmodels.Empty) (*datasetmodels.DatasetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Datasets not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *commonmodels.ID) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) CreateNewDatasetVersion(context.Context, *datasetmodels.NewDatasetVersionRequest) (*datasetmodels.DatasetVersionEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) DatasetVersions(context.Context, *commonmodels.ID) (*datasetmodels.DatasetVersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetVersions not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDatasetVersion(context.Context, *commonmodels.ID) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasetVersion not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDatasetVersionObjectCount(context.Context, *datasetmodels.UpdateDatasetVersionObjectCountRequest) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetVersionObjectCount not implemented")
}
func (*UnimplementedDatasetServiceServer) DatasetVersionObjects(context.Context, *commonmodels.ID) (*datasetmodels.DatasetObjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetVersionObjects not implemented")
}
func (*UnimplementedDatasetServiceServer) DatasetVersionObjectsLinks(context.Context, *commonmodels.ID) (*datasetmodels.DatasetObjectLinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetVersionObjectsLinks not implemented")
}
func (*UnimplementedDatasetServiceServer) DatasetObjectLink(context.Context, *commonmodels.ID) (*datasetmodels.DatasetObjectEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetObjectLink not implemented")
}

func RegisterDatasetServiceServer(s *grpc.Server, srv DatasetServiceServer) {
	s.RegisterService(&_DatasetService_serviceDesc, srv)
}

func _DatasetService_CreateNewDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetmodels.CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateNewDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/CreateNewDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateNewDataset(ctx, req.(*datasetmodels.CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_Datasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).Datasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/Datasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).Datasets(ctx, req.(*commonmodels.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateNewDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetmodels.NewDatasetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateNewDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/CreateNewDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateNewDatasetVersion(ctx, req.(*datasetmodels.NewDatasetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DatasetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DatasetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DatasetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DatasetVersions(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDatasetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDatasetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DeleteDatasetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDatasetVersion(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetVersionObjectCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datasetmodels.UpdateDatasetVersionObjectCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetVersionObjectCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/UpdateDatasetVersionObjectCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetVersionObjectCount(ctx, req.(*datasetmodels.UpdateDatasetVersionObjectCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DatasetVersionObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DatasetVersionObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DatasetVersionObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DatasetVersionObjects(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DatasetVersionObjectsLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DatasetVersionObjectsLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DatasetVersionObjectsLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DatasetVersionObjectsLinks(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DatasetObjectLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DatasetObjectLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatasetService/DatasetObjectLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DatasetObjectLink(ctx, req.(*commonmodels.ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewDataset",
			Handler:    _DatasetService_CreateNewDataset_Handler,
		},
		{
			MethodName: "Datasets",
			Handler:    _DatasetService_Datasets_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "CreateNewDatasetVersion",
			Handler:    _DatasetService_CreateNewDatasetVersion_Handler,
		},
		{
			MethodName: "DatasetVersions",
			Handler:    _DatasetService_DatasetVersions_Handler,
		},
		{
			MethodName: "DeleteDatasetVersion",
			Handler:    _DatasetService_DeleteDatasetVersion_Handler,
		},
		{
			MethodName: "UpdateDatasetVersionObjectCount",
			Handler:    _DatasetService_UpdateDatasetVersionObjectCount_Handler,
		},
		{
			MethodName: "DatasetVersionObjects",
			Handler:    _DatasetService_DatasetVersionObjects_Handler,
		},
		{
			MethodName: "DatasetVersionObjectsLinks",
			Handler:    _DatasetService_DatasetVersionObjectsLinks_Handler,
		},
		{
			MethodName: "DatasetObjectLink",
			Handler:    _DatasetService_DatasetObjectLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/APIs.proto",
}

// MetadataCompositeStoreClient is the client API for MetadataCompositeStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataCompositeStoreClient interface {
	InitMetadataDB(ctx context.Context, in *metadatamodels.InitMetadataDBRequest, opts ...grpc.CallOption) (*metadatamodels.MetadataDBEntry, error)
	ListMetadataDBs(ctx context.Context, in *commonmodels.Empty, opts ...grpc.CallOption) (*metadatamodels.MetadataDBList, error)
	InitMetadataDBCollection(ctx context.Context, in *metadatamodels.InitMetadataCollectionRequest, opts ...grpc.CallOption) (*metadatamodels.MetadataDBEntry, error)
	ListMetadataDBCollections(ctx context.Context, in *commonmodels.Empty, opts ...grpc.CallOption) (*metadatamodels.MetadataDBCollectionList, error)
	InsertMetadata(ctx context.Context, in *metadatamodels.InsertMetadataRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	AddMetadataIndex(ctx context.Context, in *metadatamodels.AddMetadataIndexRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error)
	Query(ctx context.Context, in *metadatamodels.QueryRequest, opts ...grpc.CallOption) (*metadatamodels.Field, error)
}

type metadataCompositeStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataCompositeStoreClient(cc grpc.ClientConnInterface) MetadataCompositeStoreClient {
	return &metadataCompositeStoreClient{cc}
}

func (c *metadataCompositeStoreClient) InitMetadataDB(ctx context.Context, in *metadatamodels.InitMetadataDBRequest, opts ...grpc.CallOption) (*metadatamodels.MetadataDBEntry, error) {
	out := new(metadatamodels.MetadataDBEntry)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/InitMetadataDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataCompositeStoreClient) ListMetadataDBs(ctx context.Context, in *commonmodels.Empty, opts ...grpc.CallOption) (*metadatamodels.MetadataDBList, error) {
	out := new(metadatamodels.MetadataDBList)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/ListMetadataDBs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataCompositeStoreClient) InitMetadataDBCollection(ctx context.Context, in *metadatamodels.InitMetadataCollectionRequest, opts ...grpc.CallOption) (*metadatamodels.MetadataDBEntry, error) {
	out := new(metadatamodels.MetadataDBEntry)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/InitMetadataDBCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataCompositeStoreClient) ListMetadataDBCollections(ctx context.Context, in *commonmodels.Empty, opts ...grpc.CallOption) (*metadatamodels.MetadataDBCollectionList, error) {
	out := new(metadatamodels.MetadataDBCollectionList)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/ListMetadataDBCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataCompositeStoreClient) InsertMetadata(ctx context.Context, in *metadatamodels.InsertMetadataRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/InsertMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataCompositeStoreClient) AddMetadataIndex(ctx context.Context, in *metadatamodels.AddMetadataIndexRequest, opts ...grpc.CallOption) (*commonmodels.Empty, error) {
	out := new(commonmodels.Empty)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/AddMetadataIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataCompositeStoreClient) Query(ctx context.Context, in *metadatamodels.QueryRequest, opts ...grpc.CallOption) (*metadatamodels.Field, error) {
	out := new(metadatamodels.Field)
	err := c.cc.Invoke(ctx, "/MetadataCompositeStore/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataCompositeStoreServer is the server API for MetadataCompositeStore service.
type MetadataCompositeStoreServer interface {
	InitMetadataDB(context.Context, *metadatamodels.InitMetadataDBRequest) (*metadatamodels.MetadataDBEntry, error)
	ListMetadataDBs(context.Context, *commonmodels.Empty) (*metadatamodels.MetadataDBList, error)
	InitMetadataDBCollection(context.Context, *metadatamodels.InitMetadataCollectionRequest) (*metadatamodels.MetadataDBEntry, error)
	ListMetadataDBCollections(context.Context, *commonmodels.Empty) (*metadatamodels.MetadataDBCollectionList, error)
	InsertMetadata(context.Context, *metadatamodels.InsertMetadataRequest) (*commonmodels.Empty, error)
	AddMetadataIndex(context.Context, *metadatamodels.AddMetadataIndexRequest) (*commonmodels.Empty, error)
	Query(context.Context, *metadatamodels.QueryRequest) (*metadatamodels.Field, error)
}

// UnimplementedMetadataCompositeStoreServer can be embedded to have forward compatible implementations.
type UnimplementedMetadataCompositeStoreServer struct {
}

func (*UnimplementedMetadataCompositeStoreServer) InitMetadataDB(context.Context, *metadatamodels.InitMetadataDBRequest) (*metadatamodels.MetadataDBEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMetadataDB not implemented")
}
func (*UnimplementedMetadataCompositeStoreServer) ListMetadataDBs(context.Context, *commonmodels.Empty) (*metadatamodels.MetadataDBList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetadataDBs not implemented")
}
func (*UnimplementedMetadataCompositeStoreServer) InitMetadataDBCollection(context.Context, *metadatamodels.InitMetadataCollectionRequest) (*metadatamodels.MetadataDBEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMetadataDBCollection not implemented")
}
func (*UnimplementedMetadataCompositeStoreServer) ListMetadataDBCollections(context.Context, *commonmodels.Empty) (*metadatamodels.MetadataDBCollectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetadataDBCollections not implemented")
}
func (*UnimplementedMetadataCompositeStoreServer) InsertMetadata(context.Context, *metadatamodels.InsertMetadataRequest) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMetadata not implemented")
}
func (*UnimplementedMetadataCompositeStoreServer) AddMetadataIndex(context.Context, *metadatamodels.AddMetadataIndexRequest) (*commonmodels.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadataIndex not implemented")
}
func (*UnimplementedMetadataCompositeStoreServer) Query(context.Context, *metadatamodels.QueryRequest) (*metadatamodels.Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterMetadataCompositeStoreServer(s *grpc.Server, srv MetadataCompositeStoreServer) {
	s.RegisterService(&_MetadataCompositeStore_serviceDesc, srv)
}

func _MetadataCompositeStore_InitMetadataDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metadatamodels.InitMetadataDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).InitMetadataDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/InitMetadataDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).InitMetadataDB(ctx, req.(*metadatamodels.InitMetadataDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataCompositeStore_ListMetadataDBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).ListMetadataDBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/ListMetadataDBs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).ListMetadataDBs(ctx, req.(*commonmodels.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataCompositeStore_InitMetadataDBCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metadatamodels.InitMetadataCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).InitMetadataDBCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/InitMetadataDBCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).InitMetadataDBCollection(ctx, req.(*metadatamodels.InitMetadataCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataCompositeStore_ListMetadataDBCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonmodels.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).ListMetadataDBCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/ListMetadataDBCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).ListMetadataDBCollections(ctx, req.(*commonmodels.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataCompositeStore_InsertMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metadatamodels.InsertMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).InsertMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/InsertMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).InsertMetadata(ctx, req.(*metadatamodels.InsertMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataCompositeStore_AddMetadataIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metadatamodels.AddMetadataIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).AddMetadataIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/AddMetadataIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).AddMetadataIndex(ctx, req.(*metadatamodels.AddMetadataIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataCompositeStore_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metadatamodels.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataCompositeStoreServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataCompositeStore/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataCompositeStoreServer).Query(ctx, req.(*metadatamodels.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataCompositeStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MetadataCompositeStore",
	HandlerType: (*MetadataCompositeStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitMetadataDB",
			Handler:    _MetadataCompositeStore_InitMetadataDB_Handler,
		},
		{
			MethodName: "ListMetadataDBs",
			Handler:    _MetadataCompositeStore_ListMetadataDBs_Handler,
		},
		{
			MethodName: "InitMetadataDBCollection",
			Handler:    _MetadataCompositeStore_InitMetadataDBCollection_Handler,
		},
		{
			MethodName: "ListMetadataDBCollections",
			Handler:    _MetadataCompositeStore_ListMetadataDBCollections_Handler,
		},
		{
			MethodName: "InsertMetadata",
			Handler:    _MetadataCompositeStore_InsertMetadata_Handler,
		},
		{
			MethodName: "AddMetadataIndex",
			Handler:    _MetadataCompositeStore_AddMetadataIndex_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MetadataCompositeStore_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/APIs.proto",
}
