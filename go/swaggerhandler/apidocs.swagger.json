{
  "swagger": "2.0",
  "info": {
    "title": "proto/AuthAPI.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/auth/createapitoken": {
      "post": {
        "summary": "CreateAPIToken Creates a new API token and returns it",
        "operationId": "APITokenService_CreateAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TokenEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTokenRequest"
            }
          }
        ],
        "tags": [
          "APITokenService"
        ]
      }
    },
    "/api/v1/auth/deleteapitoken": {
      "post": {
        "summary": "RevokeToken Revokes an access token",
        "operationId": "APITokenService_RevokeToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "APITokenService"
        ]
      }
    },
    "/api/v1/auth/listapitokens": {
      "get": {
        "summary": "GetTokenList Lists all available access tokens",
        "operationId": "APITokenService_GetTokenList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TokenList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "APITokenService"
        ]
      }
    },
    "/api/v1/dataset/create": {
      "post": {
        "summary": "CreateNewDataset Creates a new dataset",
        "operationId": "DatasetService_CreateNewDataset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatasetRequest"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/dataset/delete": {
      "post": {
        "summary": "DeleteDataset Delete a dataset",
        "operationId": "DatasetService_DeleteDataset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/dataset/list": {
      "post": {
        "summary": "Datasets Lists all datasets",
        "operationId": "DatasetService_Datasets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/datasetobjectgroup/create": {
      "post": {
        "operationId": "DatasetService_CreateDatasetObjectGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetObjectGroup"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatasetObjectGroupRequest"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/datasetobjectgroup/list": {
      "post": {
        "summary": "Lists all entities of a dataset",
        "operationId": "DatasetService_DatasetVersionObjectGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetObjectGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/datasetversion/create": {
      "post": {
        "summary": "Creates a new dataset version based on an existing dataset",
        "operationId": "DatasetService_CreateNewDatasetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetVersionEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewDatasetVersionRequest"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/datasetversion/delete": {
      "post": {
        "summary": "Deletes a dataset version\nThis should not delete the underlaying dataset objects",
        "operationId": "DatasetService_DeleteDatasetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/datasetversion/list": {
      "post": {
        "summary": "Lists Versions of a dataset",
        "operationId": "DatasetService_DatasetVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetVersionList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/datasetversion/update/objectcount": {
      "post": {
        "summary": "Updates the expected number of objects in a dataset",
        "operationId": "DatasetService_UpdateDatasetVersionObjectCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDatasetVersionObjectCountRequest"
            }
          }
        ],
        "tags": [
          "DatasetService"
        ]
      }
    },
    "/api/v1/load/createlinks": {
      "post": {
        "summary": "Creates a list of upload links to place dataset entities in object storage\nand adds corresponding metadata objects",
        "operationId": "LoadService_CreateUploadLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateUploadLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUploadLinkRequest"
            }
          }
        ],
        "tags": [
          "LoadService"
        ]
      }
    },
    "/api/v1/load/download": {
      "post": {
        "operationId": "LoadService_GetDownloadLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetDownloadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDownloadRequest"
            }
          }
        ],
        "tags": [
          "LoadService"
        ]
      }
    },
    "/api/v1/load/finishmultipartupload": {
      "post": {
        "operationId": "LoadService_FinishMultipartUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinishMultipartUploadRequest"
            }
          }
        ],
        "tags": [
          "LoadService"
        ]
      }
    },
    "/api/v1/load/getmultipartuploadlinkpart": {
      "post": {
        "operationId": "LoadService_GetMultipartUploadLinkPart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetMultipartUploadLinkPartResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMultipartUploadLinkPartRequest"
            }
          }
        ],
        "tags": [
          "LoadService"
        ]
      }
    },
    "/api/v1/load/initmultipartupload": {
      "post": {
        "operationId": "LoadService_InitMultipartUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitMultipartUploadRequest"
            }
          }
        ],
        "tags": [
          "LoadService"
        ]
      }
    },
    "/api/v1/metadata/index": {
      "post": {
        "operationId": "MetadataCompositeStore_AddMetadataIndex",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddMetadataIndexRequest"
            }
          }
        ],
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/metadata/initcollection": {
      "post": {
        "operationId": "MetadataCompositeStore_InitMetadataDBCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetadataDBEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitMetadataCollectionRequest"
            }
          }
        ],
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/metadata/initdb": {
      "post": {
        "operationId": "MetadataCompositeStore_InitMetadataDB",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetadataDBEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitMetadataDBRequest"
            }
          }
        ],
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/metadata/insert": {
      "post": {
        "operationId": "MetadataCompositeStore_InsertMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertMetadataRequest"
            }
          }
        ],
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/metadata/listcollcetions": {
      "get": {
        "operationId": "MetadataCompositeStore_ListMetadataDBCollections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetadataDBCollectionList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/metadata/listdbs": {
      "get": {
        "operationId": "MetadataCompositeStore_ListMetadataDBs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetadataDBList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/metadata/query": {
      "post": {
        "operationId": "MetadataCompositeStore_Query",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Field"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "MetadataCompositeStore"
        ]
      }
    },
    "/api/v1/project/addusertoproject": {
      "post": {
        "operationId": "ProjectAPI_AddUserToProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddUserToProjectRequest"
            }
          }
        ],
        "tags": [
          "ProjectAPI"
        ]
      }
    },
    "/api/v1/project/createproject": {
      "post": {
        "operationId": "ProjectAPI_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectEntry"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectRequest"
            }
          }
        ],
        "tags": [
          "ProjectAPI"
        ]
      }
    },
    "/api/v1/project/delete": {
      "post": {
        "operationId": "ProjectAPI_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "ProjectAPI"
        ]
      }
    },
    "/api/v1/project/projectdatasets": {
      "post": {
        "operationId": "ProjectAPI_GetProjectDatasets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DatasetList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ID"
            }
          }
        ],
        "tags": [
          "ProjectAPI"
        ]
      }
    },
    "/api/v1/projects": {
      "get": {
        "operationId": "ProjectAPI_GetUserProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectEntryList"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "ProjectAPI"
        ]
      }
    }
  },
  "definitions": {
    "AddMetadataIndexRequest": {
      "type": "object",
      "properties": {
        "MetadataDBID": {
          "type": "string"
        },
        "CollectionID": {
          "type": "string"
        },
        "Indices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Index"
          }
        }
      },
      "description": "Request to add indices on a list of fields",
      "title": "AddMetadataIndexRequest"
    },
    "AddUserToProjectRequest": {
      "type": "object",
      "properties": {
        "UserID": {
          "type": "string"
        },
        "Scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Right"
          }
        },
        "ProjectID": {
          "type": "string"
        }
      },
      "description": "Adds a new user to a project",
      "title": "AddUserToProjectRequest"
    },
    "CompletedUploadParts": {
      "type": "object",
      "properties": {
        "Etag": {
          "type": "string"
        },
        "Partnumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CreateDatasetObjectGroupRequest": {
      "type": "object",
      "properties": {
        "DatasetObjectAnchor": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Version": {
          "$ref": "#/definitions/Version"
        },
        "DatasetID": {
          "type": "string"
        },
        "DatasetVersionID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateDatasetRequest": {
      "type": "object",
      "example": {
        "DatasetName": "test",
        "Datatype": "test2",
        "ProjectID": "testProject"
      },
      "properties": {
        "DatasetName": {
          "type": "string"
        },
        "Datatype": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string"
        }
      },
      "description": "Data required to start loading a dataset into the BioDataDB",
      "title": "InitLoadDataset"
    },
    "CreateProjectRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      },
      "description": "Request to create a new project",
      "title": "CreateProjectRequest"
    },
    "CreateTokenRequest": {
      "type": "object",
      "properties": {
        "ResourceID": {
          "type": "string"
        },
        "Rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Right"
          }
        },
        "Resource": {
          "$ref": "#/definitions/Resource"
        },
        "Expires": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Request data to create a new token for a given dataset",
      "title": "CreateTokenRequest"
    },
    "CreateUploadLinkRequest": {
      "type": "object",
      "properties": {
        "DatsetObjectID": {
          "type": "string"
        }
      }
    },
    "CreateUploadLinkResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Link": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/DatasetObjectEntry"
        }
      },
      "description": "A presigned URL link and its upload request URL",
      "title": "UploadLink"
    },
    "DatasetEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Datasetname": {
          "type": "string"
        },
        "Datasettype": {
          "type": "string"
        },
        "IsPublic": {
          "type": "boolean",
          "format": "boolean"
        },
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "CurrentVersion": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/Status"
        },
        "OwnerProjectID": {
          "type": "string"
        },
        "BurrowedProjectIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Database entry for a dataset",
      "title": "DatasetEntry"
    },
    "DatasetList": {
      "type": "object",
      "properties": {
        "Datasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetEntry"
          }
        }
      },
      "description": "A list of datasets",
      "title": "DatasetList"
    },
    "DatasetObjectEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Filename": {
          "type": "string"
        },
        "Filetype": {
          "type": "string"
        },
        "Origin": {
          "$ref": "#/definitions/Origin"
        },
        "ContentLen": {
          "type": "string",
          "format": "int64"
        },
        "Location": {
          "$ref": "#/definitions/Location"
        },
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "AdditionalMetadata": {
          "type": "object"
        },
        "UploadID": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/Status"
        },
        "DatasetObjectGroup": {
          "type": "string"
        }
      },
      "description": "Representation of a dataset entity",
      "title": "DatasetObjectEntry"
    },
    "DatasetObjectGroup": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "DatasetObjectAnchor": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Version": {
          "$ref": "#/definitions/Version"
        },
        "DatasetID": {
          "type": "string"
        },
        "DatasetVersionID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A set of dataset objects that are bundled together for easier management. An example use case would be a set of binary data objects along with an index file.",
      "title": "DatasetObjectGroup"
    },
    "DatasetObjectGroupList": {
      "type": "object",
      "properties": {
        "DatasetVersionObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetObjectGroup"
          }
        }
      },
      "description": "A list of datasets",
      "title": "DatasetList"
    },
    "DatasetVersionEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "DatasetID": {
          "type": "string"
        },
        "Datasetname": {
          "type": "string"
        },
        "Version": {
          "$ref": "#/definitions/Version"
        },
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "AdditionalMetadata": {
          "type": "object"
        },
        "AdditionalMetadataMessageRef": {
          "type": "string"
        },
        "AdditionalObjectMetadataMessageRef": {
          "type": "string"
        },
        "ObjectCount": {
          "type": "string",
          "format": "int64"
        },
        "ObjectLinkCount": {
          "type": "string",
          "format": "int64"
        },
        "ExpectedObjectCount": {
          "type": "string",
          "format": "int64"
        },
        "Status": {
          "$ref": "#/definitions/Status"
        }
      },
      "description": "Dataset version representation",
      "title": "DatasetVersionEntry"
    },
    "DatasetVersionList": {
      "type": "object",
      "properties": {
        "DatasetVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetVersionEntry"
          }
        }
      },
      "description": "A list of datasetversions",
      "title": "DatasetList"
    },
    "Empty": {
      "type": "object",
      "description": "An empty object",
      "title": "Empty"
    },
    "Field": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "description": "TODO - WIP",
      "title": "Field"
    },
    "FinishMultipartUploadRequest": {
      "type": "object",
      "properties": {
        "DatasetObjectID": {
          "type": "string"
        },
        "CompletedUploadParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompletedUploadParts"
          }
        }
      }
    },
    "GetDownloadRequest": {
      "type": "object",
      "properties": {
        "Resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRequest"
          }
        }
      }
    },
    "GetDownloadResponse": {
      "type": "object",
      "properties": {
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectDownloadLink"
          }
        }
      }
    },
    "GetMultipartUploadLinkPartRequest": {
      "type": "object",
      "properties": {
        "DatasetObjectID": {
          "type": "string"
        },
        "UploadPart": {
          "type": "string",
          "format": "int64"
        },
        "ContentLen": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMultipartUploadLinkPartResponse": {
      "type": "object",
      "properties": {
        "UploadLink": {
          "type": "string"
        },
        "Etag": {
          "type": "string"
        }
      }
    },
    "ID": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        }
      },
      "description": "An arbitrary ID",
      "title": "ID"
    },
    "Index": {
      "type": "object",
      "properties": {
        "Field": {
          "type": "string"
        }
      },
      "description": "TODO - WIP",
      "title": "Index"
    },
    "InitMetadataCollectionRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "MessageRef": {
          "type": "string"
        },
        "MetadataDBEntryID": {
          "type": "string"
        }
      },
      "description": "Request a new MetadataDB Collection",
      "title": "InitMetadataCollectionRequest"
    },
    "InitMetadataDBRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        }
      },
      "description": "Request a new MetadataDB",
      "title": "InitMetadataDBRequest"
    },
    "InitMultipartUploadRequest": {
      "type": "object",
      "properties": {
        "DatsetObjectID": {
          "type": "string"
        }
      }
    },
    "InsertMetadataRequest": {
      "type": "object",
      "properties": {
        "MetadataDBID": {
          "type": "string"
        },
        "CollectionID": {
          "type": "string"
        },
        "StructMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StructMetadataMessage"
          }
        }
      },
      "description": "A request to insert a set of metadata. Metadata can be provided either as Any message type or Struct message type. If Any type is used, the message must be well known",
      "title": "InsertMetadataRequest"
    },
    "Location": {
      "type": "object",
      "properties": {
        "Bucket": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        }
      },
      "description": "A location in an object storage",
      "title": "Location"
    },
    "MetadataCollectionEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "MessageRef": {
          "type": "string"
        },
        "StructMessageRef": {
          "type": "string"
        },
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "MetadatDBEntryID": {
          "type": "string"
        }
      },
      "description": "A MetadataDB Collection",
      "title": "MetadataCollectionEntry"
    },
    "MetadataDBCollectionList": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataCollectionEntry"
          }
        }
      }
    },
    "MetadataDBEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "StructMessageRef": {
          "type": "string"
        },
        "Created": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "MetadataDB",
      "title": "MetadataDBEntry"
    },
    "MetadataDBList": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataDBEntry"
          }
        }
      }
    },
    "NewDatasetVersionRequest": {
      "type": "object",
      "properties": {
        "DatasetID": {
          "type": "string"
        },
        "Version": {
          "$ref": "#/definitions/Version"
        },
        "AdditionalMetadataMessageRef": {
          "type": "string"
        },
        "AdditionalObjectMetadataMessageRef": {
          "type": "string"
        },
        "AdditionalMetadata": {
          "type": "object"
        },
        "ExpectedObjectCount": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Creates a new dataset version",
      "title": "NewDatasetVersionRequest"
    },
    "ObjectDownloadLink": {
      "type": "object",
      "properties": {
        "Link": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/DatasetObjectEntry"
        }
      }
    },
    "Origin": {
      "type": "object",
      "example": {
        "Link": "example.com/myawsomedata.test.gbff",
        "OriginTypeEnum": "OriginLink"
      },
      "properties": {
        "Link": {
          "type": "string"
        },
        "ObjectStorageLocatio": {
          "$ref": "#/definitions/Location"
        },
        "OriginType": {
          "$ref": "#/definitions/OriginOriginTypeEnum"
        }
      },
      "description": "The source of a dataset. Entries are set depending of the origin type.  OriginLink means that a link is given, objectstorage that bucket, key and link are present. Link is the s3 endpoint",
      "title": "Origin"
    },
    "OriginOriginTypeEnum": {
      "type": "string",
      "enum": [
        "ObjectStorage",
        "OriginLink"
      ],
      "default": "ObjectStorage"
    },
    "ProjectEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "ProjectName": {
          "type": "string"
        }
      }
    },
    "ProjectEntryList": {
      "type": "object",
      "properties": {
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectEntry"
          }
        }
      },
      "description": "Lists all projects of a user",
      "title": "ProjectEntryList"
    },
    "QueryRequest": {
      "type": "object",
      "properties": {
        "MetadataDBID": {
          "type": "string"
        },
        "CollectionID": {
          "type": "string"
        },
        "Query": {
          "type": "object"
        }
      },
      "description": "TODO - WIP",
      "title": "QueryRequest"
    },
    "Resource": {
      "type": "string",
      "enum": [
        "Project",
        "Dataset",
        "DatasetVersion",
        "DatasetObject",
        "DatasetObjectGroupResource"
      ],
      "default": "Project"
    },
    "ResourceRequest": {
      "type": "object",
      "properties": {
        "Resource": {
          "$ref": "#/definitions/Resource"
        },
        "ResourceID": {
          "type": "string"
        }
      }
    },
    "Right": {
      "type": "string",
      "enum": [
        "Read",
        "Write"
      ],
      "default": "Read"
    },
    "Status": {
      "type": "string",
      "enum": [
        "Initiating",
        "Available",
        "Updating",
        "Archived",
        "Deleting"
      ],
      "default": "Initiating"
    },
    "StructMetadataMessage": {
      "type": "object",
      "properties": {
        "Metadata": {
          "type": "object"
        },
        "Int64Indices": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        },
        "UInt64Indices": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "description": "Metadata message of struct type. The struct type uses JSON and cannot store int64/uint64 properly. To create indices on int64/uint64 values please use the provided maps.",
      "title": "AnyMetadataMessage"
    },
    "TokenEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "UserID": {
          "$ref": "#/definitions/User"
        },
        "Token": {
          "type": "string"
        },
        "Resource": {
          "$ref": "#/definitions/Resource"
        },
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "Expires": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "A description of an api token",
      "title": "TokenEntry"
    },
    "TokenList": {
      "type": "object",
      "properties": {
        "ProjectID": {
          "type": "string"
        },
        "token": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenEntry"
          }
        }
      },
      "description": "Lists all available api tokens for a user",
      "title": "TokenList"
    },
    "UpdateDatasetVersionObjectCountRequest": {
      "type": "object",
      "properties": {
        "DatasetVersionID": {
          "type": "string"
        },
        "Value": {
          "type": "string",
          "format": "int64"
        },
        "DatasetID": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "UserID": {
          "type": "string"
        },
        "Rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Right"
          }
        },
        "Resource": {
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "Version": {
      "type": "object",
      "example": {
        "Major": 0,
        "Minor": 1,
        "Patch": 0,
        "Revision": 1,
        "Stage": "Alpha"
      },
      "properties": {
        "Major": {
          "type": "integer",
          "format": "int32"
        },
        "Minor": {
          "type": "integer",
          "format": "int32"
        },
        "Patch": {
          "type": "integer",
          "format": "int32"
        },
        "Revision": {
          "type": "integer",
          "format": "int32"
        },
        "Stage": {
          "$ref": "#/definitions/VersionVersionStage"
        }
      },
      "description": "A version representation based on semantic versioning",
      "title": "Version"
    },
    "VersionVersionStage": {
      "type": "string",
      "enum": [
        "Stable",
        "ReleaseCandidate",
        "Beta",
        "Alpha"
      ],
      "default": "Stable"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
