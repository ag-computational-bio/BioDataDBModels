// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: proto/DatasetEntryModels.proto

package datasetentrymodels

import (
	commonmodels "github.com/ag-computational-bio/BioDataDBModels/go/commonmodels"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Status int32

const (
	Status_Initiating Status = 0
	Status_Available  Status = 1
	Status_Updating   Status = 2
	Status_Archived   Status = 3
	Status_Deleting   Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "Initiating",
		1: "Available",
		2: "Updating",
		3: "Archived",
		4: "Deleting",
	}
	Status_value = map[string]int32{
		"Initiating": 0,
		"Available":  1,
		"Updating":   2,
		"Archived":   3,
		"Deleting":   4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_DatasetEntryModels_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_proto_DatasetEntryModels_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_DatasetEntryModels_proto_rawDescGZIP(), []int{0}
}

type DatasetEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Datasetname        string               `protobuf:"bytes,2,opt,name=Datasetname,proto3" json:"Datasetname,omitempty"` // Name of the dataset
	Datasettype        string               `protobuf:"bytes,3,opt,name=Datasettype,proto3" json:"Datasettype,omitempty"` // Type of the stored data in the dataset
	IsPublic           bool                 `protobuf:"varint,4,opt,name=IsPublic,proto3" json:"IsPublic,omitempty"`      //Indicates if the dataset if publicly available
	Created            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=Created,proto3" json:"Created,omitempty"`         // When the datasets was created
	CurrentVersion     string               `protobuf:"bytes,6,opt,name=CurrentVersion,proto3" json:"CurrentVersion,omitempty"`
	Status             Status               `protobuf:"varint,7,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`
	OwnerProjectID     string               `protobuf:"bytes,8,opt,name=OwnerProjectID,proto3" json:"OwnerProjectID,omitempty"`
	BurrowedProjectIDs []string             `protobuf:"bytes,9,rep,name=BurrowedProjectIDs,proto3" json:"BurrowedProjectIDs,omitempty"`
}

func (x *DatasetEntry) Reset() {
	*x = DatasetEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_DatasetEntryModels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetEntry) ProtoMessage() {}

func (x *DatasetEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_DatasetEntryModels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetEntry.ProtoReflect.Descriptor instead.
func (*DatasetEntry) Descriptor() ([]byte, []int) {
	return file_proto_DatasetEntryModels_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DatasetEntry) GetDatasetname() string {
	if x != nil {
		return x.Datasetname
	}
	return ""
}

func (x *DatasetEntry) GetDatasettype() string {
	if x != nil {
		return x.Datasettype
	}
	return ""
}

func (x *DatasetEntry) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *DatasetEntry) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DatasetEntry) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *DatasetEntry) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Initiating
}

func (x *DatasetEntry) GetOwnerProjectID() string {
	if x != nil {
		return x.OwnerProjectID
	}
	return ""
}

func (x *DatasetEntry) GetBurrowedProjectIDs() []string {
	if x != nil {
		return x.BurrowedProjectIDs
	}
	return nil
}

type DatasetVersionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                                 string                `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DatasetID                          string                `protobuf:"bytes,2,opt,name=DatasetID,proto3" json:"DatasetID,omitempty"`
	Datasetname                        string                `protobuf:"bytes,3,opt,name=Datasetname,proto3" json:"Datasetname,omitempty"`
	Version                            *commonmodels.Version `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	Created                            *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=Created,proto3" json:"Created,omitempty"`                                                       // When the datasets version was created
	AdditionalMetadata                 *_struct.Struct       `protobuf:"bytes,56,opt,name=AdditionalMetadata,proto3" json:"AdditionalMetadata,omitempty"`                                // Additional metadata for the dataset version
	AdditionalMetadataMessageRef       string                `protobuf:"bytes,7,opt,name=AdditionalMetadataMessageRef,proto3" json:"AdditionalMetadataMessageRef,omitempty"`             // Message reference for the metadata
	AdditionalObjectMetadataMessageRef string                `protobuf:"bytes,8,opt,name=AdditionalObjectMetadataMessageRef,proto3" json:"AdditionalObjectMetadataMessageRef,omitempty"` // Message reference for the metadata of the objects associated with this DatasetVersion
	ObjectCount                        int64                 `protobuf:"varint,9,opt,name=ObjectCount,proto3" json:"ObjectCount,omitempty"`                                              // Number of objects registered with this dataset version
	ObjectLinkCount                    int64                 `protobuf:"varint,10,opt,name=ObjectLinkCount,proto3" json:"ObjectLinkCount,omitempty"`                                     // Number of requested links to upload objects
	ExpectedObjectCount                int64                 `protobuf:"varint,11,opt,name=ExpectedObjectCount,proto3" json:"ExpectedObjectCount,omitempty"`                             // Number of objects that is expected to be registered in this dataset
	Status                             Status                `protobuf:"varint,12,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`                                           // Indicates the status of a dataset
}

func (x *DatasetVersionEntry) Reset() {
	*x = DatasetVersionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_DatasetEntryModels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetVersionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetVersionEntry) ProtoMessage() {}

func (x *DatasetVersionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_DatasetEntryModels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetVersionEntry.ProtoReflect.Descriptor instead.
func (*DatasetVersionEntry) Descriptor() ([]byte, []int) {
	return file_proto_DatasetEntryModels_proto_rawDescGZIP(), []int{1}
}

func (x *DatasetVersionEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DatasetVersionEntry) GetDatasetID() string {
	if x != nil {
		return x.DatasetID
	}
	return ""
}

func (x *DatasetVersionEntry) GetDatasetname() string {
	if x != nil {
		return x.Datasetname
	}
	return ""
}

func (x *DatasetVersionEntry) GetVersion() *commonmodels.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DatasetVersionEntry) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DatasetVersionEntry) GetAdditionalMetadata() *_struct.Struct {
	if x != nil {
		return x.AdditionalMetadata
	}
	return nil
}

func (x *DatasetVersionEntry) GetAdditionalMetadataMessageRef() string {
	if x != nil {
		return x.AdditionalMetadataMessageRef
	}
	return ""
}

func (x *DatasetVersionEntry) GetAdditionalObjectMetadataMessageRef() string {
	if x != nil {
		return x.AdditionalObjectMetadataMessageRef
	}
	return ""
}

func (x *DatasetVersionEntry) GetObjectCount() int64 {
	if x != nil {
		return x.ObjectCount
	}
	return 0
}

func (x *DatasetVersionEntry) GetObjectLinkCount() int64 {
	if x != nil {
		return x.ObjectLinkCount
	}
	return 0
}

func (x *DatasetVersionEntry) GetExpectedObjectCount() int64 {
	if x != nil {
		return x.ExpectedObjectCount
	}
	return 0
}

func (x *DatasetVersionEntry) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Initiating
}

type DatasetGroupHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CurrentStableVersionID      string            `protobuf:"bytes,2,opt,name=CurrentStableVersionID,proto3" json:"CurrentStableVersionID,omitempty"`
	CurrentDevelopmentVersionID string            `protobuf:"bytes,3,opt,name=CurrentDevelopmentVersionID,proto3" json:"CurrentDevelopmentVersionID,omitempty"`
	CurrentHead                 string            `protobuf:"bytes,4,opt,name=CurrentHead,proto3" json:"CurrentHead,omitempty"`
	Name                        string            `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"` // Name: Name of the dataset entity e.g.: mydata
	Fileformat                  []string          `protobuf:"bytes,6,rep,name=Fileformat,proto3" json:"Fileformat,omitempty"`
	Filetype                    []string          `protobuf:"bytes,7,rep,name=Filetype,proto3" json:"Filetype,omitempty"`
	Labels                      map[string]string `protobuf:"bytes,8,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatasetGroupHistory) Reset() {
	*x = DatasetGroupHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_DatasetEntryModels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetGroupHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetGroupHistory) ProtoMessage() {}

func (x *DatasetGroupHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_DatasetEntryModels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetGroupHistory.ProtoReflect.Descriptor instead.
func (*DatasetGroupHistory) Descriptor() ([]byte, []int) {
	return file_proto_DatasetEntryModels_proto_rawDescGZIP(), []int{2}
}

func (x *DatasetGroupHistory) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DatasetGroupHistory) GetCurrentStableVersionID() string {
	if x != nil {
		return x.CurrentStableVersionID
	}
	return ""
}

func (x *DatasetGroupHistory) GetCurrentDevelopmentVersionID() string {
	if x != nil {
		return x.CurrentDevelopmentVersionID
	}
	return ""
}

func (x *DatasetGroupHistory) GetCurrentHead() string {
	if x != nil {
		return x.CurrentHead
	}
	return ""
}

func (x *DatasetGroupHistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetGroupHistory) GetFileformat() []string {
	if x != nil {
		return x.Fileformat
	}
	return nil
}

func (x *DatasetGroupHistory) GetFiletype() []string {
	if x != nil {
		return x.Filetype
	}
	return nil
}

func (x *DatasetGroupHistory) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DatasetObjectEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                 //ID of the entity
	Filename           string                 `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`                     // Filename: Name of the original file e.g.: mydata.json
	Filetype           string                 `protobuf:"bytes,3,opt,name=Filetype,proto3" json:"Filetype,omitempty"`                     // Filetype: Type of the stored file, e.g.: json, gbff,...
	Origin             *commonmodels.Origin   `protobuf:"bytes,4,opt,name=Origin,proto3" json:"Origin,omitempty"`                         // Origin: Source of the dataset
	ContentLen         int64                  `protobuf:"varint,5,opt,name=ContentLen,proto3" json:"ContentLen,omitempty"`                // ContentLen: Lenght of the stored dataset
	Location           *commonmodels.Location `protobuf:"bytes,6,opt,name=Location,proto3" json:"Location,omitempty"`                     // Location: Location of the data
	Created            *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=Created,proto3" json:"Created,omitempty"`                       // When the data object was created
	AdditionalMetadata *_struct.Struct        `protobuf:"bytes,8,opt,name=AdditionalMetadata,proto3" json:"AdditionalMetadata,omitempty"` // Additional metadata of the object
	UploadID           string                 `protobuf:"bytes,9,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	Status             Status                 `protobuf:"varint,10,opt,name=Status,proto3,enum=Status" json:"Status,omitempty"`
}

func (x *DatasetObjectEntry) Reset() {
	*x = DatasetObjectEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_DatasetEntryModels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetObjectEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetObjectEntry) ProtoMessage() {}

func (x *DatasetObjectEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_DatasetEntryModels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetObjectEntry.ProtoReflect.Descriptor instead.
func (*DatasetObjectEntry) Descriptor() ([]byte, []int) {
	return file_proto_DatasetEntryModels_proto_rawDescGZIP(), []int{3}
}

func (x *DatasetObjectEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DatasetObjectEntry) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DatasetObjectEntry) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *DatasetObjectEntry) GetOrigin() *commonmodels.Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *DatasetObjectEntry) GetContentLen() int64 {
	if x != nil {
		return x.ContentLen
	}
	return 0
}

func (x *DatasetObjectEntry) GetLocation() *commonmodels.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DatasetObjectEntry) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DatasetObjectEntry) GetAdditionalMetadata() *_struct.Struct {
	if x != nil {
		return x.AdditionalMetadata
	}
	return nil
}

func (x *DatasetObjectEntry) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *DatasetObjectEntry) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Initiating
}

type DatasetObjectGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    string                `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DatasetGroupHistoryID string                `protobuf:"bytes,2,opt,name=DatasetGroupHistoryID,proto3" json:"DatasetGroupHistoryID,omitempty"`
	Name                  string                `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Version               *commonmodels.Version `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	DatasetID             string                `protobuf:"bytes,5,opt,name=DatasetID,proto3" json:"DatasetID,omitempty"`               // DatasetID: ID of the parent dataset
	DatasetVersionID      []string              `protobuf:"bytes,6,rep,name=DatasetVersionID,proto3" json:"DatasetVersionID,omitempty"` // DatasetVersionID: ID of the parent dataset version
	Objects               []*DatasetObjectEntry `protobuf:"bytes,7,rep,name=Objects,proto3" json:"Objects,omitempty"`
	AdditionalMetadata    *_struct.Struct       `protobuf:"bytes,8,opt,name=AdditionalMetadata,proto3" json:"AdditionalMetadata,omitempty"` // Additional metadata of the object
}

func (x *DatasetObjectGroup) Reset() {
	*x = DatasetObjectGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_DatasetEntryModels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetObjectGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetObjectGroup) ProtoMessage() {}

func (x *DatasetObjectGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_DatasetEntryModels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetObjectGroup.ProtoReflect.Descriptor instead.
func (*DatasetObjectGroup) Descriptor() ([]byte, []int) {
	return file_proto_DatasetEntryModels_proto_rawDescGZIP(), []int{4}
}

func (x *DatasetObjectGroup) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DatasetObjectGroup) GetDatasetGroupHistoryID() string {
	if x != nil {
		return x.DatasetGroupHistoryID
	}
	return ""
}

func (x *DatasetObjectGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetObjectGroup) GetVersion() *commonmodels.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DatasetObjectGroup) GetDatasetID() string {
	if x != nil {
		return x.DatasetID
	}
	return ""
}

func (x *DatasetObjectGroup) GetDatasetVersionID() []string {
	if x != nil {
		return x.DatasetVersionID
	}
	return nil
}

func (x *DatasetObjectGroup) GetObjects() []*DatasetObjectEntry {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *DatasetObjectGroup) GetAdditionalMetadata() *_struct.Struct {
	if x != nil {
		return x.AdditionalMetadata
	}
	return nil
}

var File_proto_DatasetEntryModels_proto protoreflect.FileDescriptor

var file_proto_DatasetEntryModels_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x88, 0x03, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x42,
	0x75, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x42, 0x75, 0x72, 0x72, 0x6f, 0x77, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x3a, 0x31, 0x92, 0x41, 0x2e,
	0x0a, 0x2c, 0x2a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x32, 0x1c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xf7,
	0x04, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x1c, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x4e, 0x0a,
	0x22, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x3a, 0x92, 0x41,
	0x37, 0x0a, 0x35, 0x2a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x32, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x16, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x4a, 0x41,
	0x6e, 0x20, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x20, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x22, 0xbf, 0x03, 0x0a, 0x12, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x3d, 0x92, 0x41,
	0x3a, 0x0a, 0x38, 0x2a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x32, 0x22, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x92, 0x04, 0x0a, 0x12,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0xbb, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x0a, 0xb4, 0x01, 0x2a, 0x12, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x32, 0x9d, 0x01, 0x41, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x73, 0x69, 0x65, 0x72,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x41, 0x6e, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65,
	0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x2a, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x04, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x67, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x2d, 0x62, 0x69, 0x6f, 0x2f, 0x42, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x42,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_DatasetEntryModels_proto_rawDescOnce sync.Once
	file_proto_DatasetEntryModels_proto_rawDescData = file_proto_DatasetEntryModels_proto_rawDesc
)

func file_proto_DatasetEntryModels_proto_rawDescGZIP() []byte {
	file_proto_DatasetEntryModels_proto_rawDescOnce.Do(func() {
		file_proto_DatasetEntryModels_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_DatasetEntryModels_proto_rawDescData)
	})
	return file_proto_DatasetEntryModels_proto_rawDescData
}

var file_proto_DatasetEntryModels_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_DatasetEntryModels_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_DatasetEntryModels_proto_goTypes = []interface{}{
	(Status)(0),                   // 0: Status
	(*DatasetEntry)(nil),          // 1: DatasetEntry
	(*DatasetVersionEntry)(nil),   // 2: DatasetVersionEntry
	(*DatasetGroupHistory)(nil),   // 3: DatasetGroupHistory
	(*DatasetObjectEntry)(nil),    // 4: DatasetObjectEntry
	(*DatasetObjectGroup)(nil),    // 5: DatasetObjectGroup
	nil,                           // 6: DatasetGroupHistory.LabelsEntry
	(*timestamp.Timestamp)(nil),   // 7: google.protobuf.Timestamp
	(*commonmodels.Version)(nil),  // 8: Version
	(*_struct.Struct)(nil),        // 9: google.protobuf.Struct
	(*commonmodels.Origin)(nil),   // 10: Origin
	(*commonmodels.Location)(nil), // 11: Location
}
var file_proto_DatasetEntryModels_proto_depIdxs = []int32{
	7,  // 0: DatasetEntry.Created:type_name -> google.protobuf.Timestamp
	0,  // 1: DatasetEntry.Status:type_name -> Status
	8,  // 2: DatasetVersionEntry.Version:type_name -> Version
	7,  // 3: DatasetVersionEntry.Created:type_name -> google.protobuf.Timestamp
	9,  // 4: DatasetVersionEntry.AdditionalMetadata:type_name -> google.protobuf.Struct
	0,  // 5: DatasetVersionEntry.Status:type_name -> Status
	6,  // 6: DatasetGroupHistory.Labels:type_name -> DatasetGroupHistory.LabelsEntry
	10, // 7: DatasetObjectEntry.Origin:type_name -> Origin
	11, // 8: DatasetObjectEntry.Location:type_name -> Location
	7,  // 9: DatasetObjectEntry.Created:type_name -> google.protobuf.Timestamp
	9,  // 10: DatasetObjectEntry.AdditionalMetadata:type_name -> google.protobuf.Struct
	0,  // 11: DatasetObjectEntry.Status:type_name -> Status
	8,  // 12: DatasetObjectGroup.Version:type_name -> Version
	4,  // 13: DatasetObjectGroup.Objects:type_name -> DatasetObjectEntry
	9,  // 14: DatasetObjectGroup.AdditionalMetadata:type_name -> google.protobuf.Struct
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_DatasetEntryModels_proto_init() }
func file_proto_DatasetEntryModels_proto_init() {
	if File_proto_DatasetEntryModels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_DatasetEntryModels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_DatasetEntryModels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetVersionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_DatasetEntryModels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetGroupHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_DatasetEntryModels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetObjectEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_DatasetEntryModels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetObjectGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_DatasetEntryModels_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_DatasetEntryModels_proto_goTypes,
		DependencyIndexes: file_proto_DatasetEntryModels_proto_depIdxs,
		EnumInfos:         file_proto_DatasetEntryModels_proto_enumTypes,
		MessageInfos:      file_proto_DatasetEntryModels_proto_msgTypes,
	}.Build()
	File_proto_DatasetEntryModels_proto = out.File
	file_proto_DatasetEntryModels_proto_rawDesc = nil
	file_proto_DatasetEntryModels_proto_goTypes = nil
	file_proto_DatasetEntryModels_proto_depIdxs = nil
}
