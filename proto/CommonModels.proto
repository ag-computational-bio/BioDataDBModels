syntax = "proto3";

option go_package = "github.com/ag-computational-bio/BioDataDBModels/go/commonmodels";

// These are common messages that are used in multiple interfaces

import "protoc/gateway/options/annotations.proto";

enum Right {
    Read = 0;
    Write = 1;
}

enum Resource {
    Project = 0;
    Dataset = 1;
}

message User {
    string UserID = 1;
    repeated Right Rights = 2;
    Resource Resource = 3;
}

message Empty {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            title: "Empty";
            description: "An empty object";
        };
    };
}

// A location in S3
message Location {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            title: "Location";
            description: "A location in an object storage"
        };
    };
    string Bucket = 1;
    string Key = 2;
    string URL = 3; // Object storage endpoint
}

message Origin {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example: { value: '{ "Link": "example.com/myawsomedata.test.gbff", "OriginTypeEnum": "OriginLink" }' }
        json_schema: {
            title: "Origin";
            description: "The source of a dataset. Entries are set depending of the origin type.  OriginLink means that a link is given, objectstorage that bucket, key and link are present. Link is the s3 endpoint"
        };
    };
    string Link = 1;
    Location ObjectStorageLocatio = 2;
    OriginTypeEnum OriginType = 4;

    enum OriginTypeEnum {
        ObjectStorage = 0;
        OriginLink = 1;
    }
}

message ID {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            title: "ID";
            description: "An arbitrary ID"
        };
    };
    string ID = 1; // An arbitrary ID
}

message Version {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example: { value: '{ "Major": 0, "Minor": 1, "Patch": 0, "Revision": 1, "Stage": "Alpha" }' }
        json_schema: {
            title: "Version";
            description: "A version representation based on semantic versioning"
        };
    };

    int32 Major = 1;
    int32 Minor = 2;
    int32 Patch = 3;
    int32 Revision = 4;
    VersionStage Stage = 5;

    enum VersionStage {
        Stable = 0;
        ReleaseCandidate = 1;
        Beta = 2;
        Alpha = 3;
    }
}

message Int64Wrapper {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
            title: "Int64Wrapper";
            description: "A wrapper for an int64"
        };
    };

    int64 Value = 1;
}

message IDList {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        example: { value: '{ "IDs": ["1","2","3","4"]}' }
        json_schema: {
            title: "ID list";
            description: "A list of ideas"
        };
    };

    repeated string IDs = 1;
}